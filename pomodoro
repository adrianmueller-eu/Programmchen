#!/bin/bash

# Pomodoro timer script
worktime=25
breaktime=5
soundfile=
usage="Usage: \e[1m$(basename $0)\e[0m -h | [-s \e[4mfile\e[0m] [\e[4mwork\e[0m [\e[4mbreak\e[0m]]"
help="Starts a pomodoro timer with given work and break times. Default is 25 and 5 minutes.
    \e[1m-h\e[0m  	Show this help.
    \e[1m-s\e[0m \e[4mfile\e[0m	Play the soundfile \e[4mfile\e[0m at every transition.
    \e[1mwork\e[0m	Work time in minutes.
    \e[1mbreak\e[0m	Break time in minutes.
"

die() {
    printf "%s\n" "$1"
    exit 1
}

now() {
  printf "\e[37m$(date +%T)\e[0m $1"
}

while [[ -n $1 ]]; do
    case $1 in
        -h)
            printf "%b\n" "$usage"
            printf "%b\n" "$help"
            exit 0
            ;;
        -s)
            soundfile=$2
            [[ -r "$soundfile" ]] || die "Not a readable soundfile: $soundfile"
            shift 1
            ;;
        *)
            die "Invalid option: $1"
            ;;
    esac
    shift 1
done

shift $((OPTIND-1))

if [ $# -gt 2 ]; then
    die "$usage"
fi

if [ $# -eq 1 ]; then
    worktime=$1
elif [ $# -eq 2 ]; then
    worktime=$1
    breaktime=$2
fi
(( $worktime >= 1 )) || die "Worktime but be at least 1 minute, but was: $worktime"
(( $breaktime >= 1 )) || die "Break but be at least 1 minute, but was: $breaktime"

printf "Starting pomodoro timer with work time \e[1m%d\e[0m minutes and break time \e[1m%d\e[0m minutes.\n" $worktime $breaktime

i=0
task=
while true; do
    i=$((i+1))
    now "\e[1mPomodoro $i\e[0m\n"
    if [[ -n "$task" ]]; then
        printf "Have you finished \e[1m%s\e[0m? [y/n]: " "$task"
        read finished
        if [[ "$finished" == "y" ]]; then
            task=
        fi
    fi
    if [[ -z "$task" ]]; then
        printf "What are you going to do now?: "
        read task
    fi
    [[ -n "$soundfile" ]] && play -q "$soundfile" &
    note $((worktime))m "Work time is up!"
    [[ -n "$soundfile" ]] && play -q "$soundfile" &
    now "Time for a break :)\n"
    note $((breaktime))m "Break time is up!"
    [[ -n "$soundfile" ]] && play -q "$soundfile" &
    now "Press enter to start another round"
    while read -r -t 0; do read -r trash; echo "Found trash: $trash"; done  # Flush the input buffer
    read trash
done
