#!/bin/bash

depth=3
sort=
permissions=
usage="Usage: \e[1m$(basename $0)\e[0m -h | [-S|-r] [\e[4mdepth\e[0m]"
help="List directories with \"\e[1mtree\e[0m\".
$usage
    \e[1m-h\e[0m     Displays this message and exits.
    \e[1m-S\e[0m     Sort entries by size, display in human-readable format.
    \e[1m-r\e[0m     Sort entries by size, display in raw format.
    \e[1m-p\e[0m     Add permissions to the output.
    \e[4mdepth\e[0m  Depth of directories listed (1 to 99; default: $depth).
"

grep_it() {
  args=()
  for i in $(seq 1 $1); do
    arg="^."
    if [[ $i -gt 1 ]]; then
      for j in $(seq 2 $i); do
        arg+="[  ]\{3\}."
      done
    fi
    args+=("-e" "${arg}─")
  done
  echo "$dirtree" | grep "${args[@]}"
}

while [[ -n $1 ]]; do
  case $1 in
    [1-9]|[1-9][0-9])
      depth=$1
      ;;
    -[1-9]|-[1-9][0-9])
      depth=$1;
      ;;
    -S|-s)
      sort=1
      ;;
    -r)
      sort=2
      ;;
    -p)
      permissions=1
      ;;
    -h|--help)
      printf "$help"
      exit 0
      ;;
    *)
      printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
      exit 1
      ;;
  esac
  shift
done

sizeFormat() {
  if [[ $1 -ge 100000000000 ]]; then
    printf "%.0fG" $(echo "scale=1; $1/1000000000" | bc)
  elif [[ $1 -ge 10000000000 ]]; then
    printf "%.1fG" $(echo "scale=2; $1/1000000000" | bc)
  elif [[ $1 -ge 1000000000 ]]; then
    printf "%.2fG" $(echo "scale=3; $1/1000000000" | bc)
  elif [[ $1 -ge 100000000 ]]; then
    printf "%.0fM" $(echo "scale=1; $1/1000000" | bc)
  elif [[ $1 -ge 10000000 ]]; then
    printf "%.1fM" $(echo "scale=2; $1/1000000" | bc)
  elif [[ $1 -ge 1000000 ]]; then
    printf "%.2fM" $(echo "scale=3; $1/1000000" | bc)
  elif [[ $1 -ge 100000 ]]; then
    printf "%.0fK" $(echo "scale=1; $1/1000" | bc)
  elif [[ $1 -ge 10000 ]]; then
    printf "%.1fK" $(echo "scale=2; $1/1000" | bc)
  elif [[ $1 -ge 1000 ]]; then
    printf "%.2fK" $(echo "scale=3; $1/1000" | bc)
  else
    printf "$1B"
  fi
}

function printEntry() {
  size=$1
  if [[ "$size" =~ ^[0-9]+$ ]]; then
    shift
    sizeFormat $size
    printf "\t%s\n" "$*"
  else
    echo "Erroneous entry: $*"
  fi
}

if [[ -n $sort ]]; then
  if [[ -n $permissions ]]; then
    dirtree=$(tree -fapFN --du | grep /$)
  else
    dirtree=$(tree -faFN --du | grep /$)
  fi
  res="$(grep_it $depth)"
  res=$(echo "$res" | sed -e 's/\[[a-z][-rwx]*//; s/[│   ]*.── \[ //; s/\]//' | sort -r)
  if [[ $sort == 1 ]]; then
    echo "$res" | while read -r entry; do
      printEntry $entry
    done
    exit 0
  fi
else
  if [[ -n $permissions ]]; then
    dirtree=$(tree -apFN | grep /$)
  else
    dirtree=$(tree -aFN | grep /$)
  fi
  res="$(grep_it $depth)"
fi
echo "$res"
