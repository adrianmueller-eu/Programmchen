#!/bin/bash

function die() {
  mes=$1
  shift
  printf "$mes\n" "$*"
  exit 1
}

target="$BLOG"
source="$C/Notes/published"

# clean up generated files
rm -rf "$BLOG"
mkdir "$BLOG"

# create top-level index
pushd "$target" >/dev/null
if [[ ! -e "index.php" ]]; then
  echo "<?php
header('Location: /');
?>" > "index.php"
fi

# copy telegram bot files
rsync -r --del --cvs-exclude "$PROJ/personal_assistant/" "../tools/gpt/telegram"

rsync -r --del --cvs-exclude "$PROJ/personal_assistant/" "../tools/gpt/telegram_mh"
# Replace "/bots/general.php" with "/bots/mental_health.php" in telegram_mh/index.php
sed -i.bak 's/\/bots\/general.php/\/bots\/mental_health.php/g' "../tools/gpt/telegram_mh/index.php"
rm -f "../tools/gpt/telegram_mh/index.php.bak"

rsync -r --del --cvs-exclude "$PROJ/personal_assistant/" "../tools/gpt/telegram_voice_bot"
# Replace "/bots/general.php" with "/bots/voice_bot.php" in telegram_voice_bot/index.php
sed -i.bak 's/\/bots\/general.php/\/bots\/voice_bot.php/g' "../tools/gpt/telegram_voice_bot/index.php"
rm -f "../tools/gpt/telegram_voice_bot/index.php.bak"

# Generate files from articles
for f in "${source}/"*.md; do
  f=$(basename "$f")
  # generate name
  f_no_ending=${f%.*}
  name=$(echo "$f_no_ending" | xargs | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g')
  # recreate folder
  rm -rf "$name"
  mkdir "$name"
  # generate html & index.php
  md2html "$source/$f" > "$name/$name.html" || die
  echo "<?php
if (file_exists('${name}-gen.html')) {
    include('${name}-gen.html');
} else {
    ob_start();
    require __DIR__ . '/../../lib.php';
    generateArticle('$name');
    file_put_contents('${name}-gen.html', ob_get_contents());
    ob_end_flush();
}
?>" > "$name/index.php"
done

# Sync with server
pushd $(git rev-parse --show-toplevel) >/dev/null
IFS=$'\n'
files=($(PAGER= git diff --name-only --cached)) || die      # staged
files+=($(PAGER= git diff --name-only))                     # not staged, same as "git ls-files -m"
files+=($(PAGER= git ls-files --others --exclude-standard)) # added
# echo "FILES: ${files[@]}"
if [[ -z "$files" ]]; then
  echo "No changes found."
  exit 0
fi
rsync --mkpath --progress --files-from=<(printf "%s\n" "${files[@]}") ./ "$CLOUD_WEB_PREFIX"

rm -f $source/*.bak

# Remote data base update
uh=${CLOUD_WEB_PREFIX%%:*}
path=${CLOUD_WEB_PREFIX#*:}
ssh "$uh" "bash \"${path}/main/update_blog.sh\""

# Commit changes
git add .
git commit -m 'auto commit'
