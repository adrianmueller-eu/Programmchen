#!/bin/bash

timeout=15
sendNote=
waitflag=  # 1=device on but no ssid, 2=ssid connected but no internet
wifiDevice=en0
PING=${PING:-8.8.8.8}

starttime=$(date "+%s")
output=2 # 3=debug; 2=outall; 1=outnosuccesswithoutwaiting; if empty, no output
usage="Usage: \e[1m$(basename $0)\e[0m -h | [-d|-s|-q] [-n] [-t \e[4mtimeout\e[0m]"
help="Test for internet connection on MacOS (using \e[1mnetworksetup\e[0m).
$usage
	\e[1m-h\e[0m	Displays this message and exits.
	\e[1m-d\e[0m	Debug output.
	\e[1m-s\e[0m	No output on success without waiting (best for scripts).
	\e[1m-q\e[0m	No console output, except errors.
	\e[1m-n\e[0m	Send also a note message on connection found.
	\e[1m-t\e[0m	Specify a timeout in seconds (default: $timeout).

Dependencies: ping, note, networksetup (MacOS)
"

while [[ -n $1 ]]; do
  case $1 in
  -h|--help)
    printf "$help"
    exit 0
    ;;
  -q)
    output=0
    ;;
  -s)
    output=1
    ;;
  -d)
    output=3
    ;;
  -n)
    sendNote=1
    ;;
  -t)
    case $2 in
    [0-9][0-9][0-9][0-9][0-9]|[0-9][0-9][0-9][0-9]|[0-9][0-9][0-9]|[0-9][0-9]|[0-9])
      #if [[ $timeout -lt 3 ]]; then
      #   echo "Wrong argument: $2 - Please give a timeout in seconds (3-32767)."
      #   exit 1
      #fi
      timeout=$2
      shift
      ;;
    *)
      echo "Wrong argument: $2 - Please give a timeout in seconds (3-32767). See -h for more help."
      exit 1
      ;;
    esac
    ;;
  *)
    printf "Wrong argument: %s\n$usage -- See -h for more help.\n" "$1"
    exit 1
    ;;
  esac
  shift
done

[[ $(uname) == "Darwin" ]] || {
  echo "Only works on MacOS!"
  exit 1
}

case $(ps -o stat= -p $$) in
*+*)
  #foreground
  ;;
*)
  output=
  ;;
esac

log() {
  if [[ $output -ge 1 ]]; then
    printf "%s\n" "$@"
  fi
}

sendNoteF() {
  if [[ -n $sendNote ]]; then
    note -m "$*" || echo "This script has a dependency to \"note\" to send notification messages."
  fi
}

fail() {
  sendNoteF "$* failed!"
  log "$* failed!"
  exit 1
}

elapsedTime=
lastOutput=-4
shouldOutput=false
setShouldOutput() {
  elapsedTime=$(($(date "+%s") - starttime))
  [[ $output -ge 3 ]] && echo "elapsedTime: $elapsedTime, lastOutput: $lastOutput"
  if [[ $((elapsedTime - lastOutput)) -ge 3 ]]; then
    lastOutput=$elapsedTime
    shouldOutput=true
  else
    shouldOutput=false
  fi
 # echo "shouldOutput: $shouldOutput"
}

function turnWifiOn() {
  log "Toggling Wi-Fi ($wifiDevice) on"
  networksetup -setairportpower "$wifiDevice" on || fail "Toggling Wi-Fi on"
}

# for preformance, first test if internet connection is established
# performance: 40ms more when not working (more latency okay), but 100ms less when working (most of the uses)
wifiDeviceStatus=$(networksetup -getairportpower "$wifiDevice" | cut -c 20-)
# check wifidevice if this didn't work
if [[ $? -ne 0 ]]; then
  wifiDevice=$(networksetup -listallhardwareports | grep -A 2 "Wi-Fi" | grep "Device" | awk '{print $2}')
  wifiDeviceStatus=$(networksetup -getairportpower "$wifiDevice" | cut -c 20-)
fi
[[ $output -ge 3 ]] && echo "Wi-Fi status: $wifiDeviceStatus"
if [[ "$wifiDeviceStatus" == "On" ]]; then
  [[ $output -ge 3 ]] && echo "ping $PING"
  netTest=$(ping -t 3 -c 1 $PING 2>/dev/null)
  if [[ $? -eq 0 ]]; then
    if [[ $output -gt 1 ]]; then
      echo 'Internet connection available!'
    fi
    exit 0
  fi
fi

elapsedTime=0
ssid_established=
while true; do
  #test if ssid connected
  #ssid=$(networksetup -getairportnetwork "$wifiDevice" | cut -c 24-)  # broken in Sequoia
  ssid=$(ipconfig getsummary "$wifiDevice" | grep '  SSID : ' | awk -F ': ' '{print $2}')
  #if [[ $ssid == *$'\n'* ]]; then  # 2 lines -> wifi Off
  if [[ -z "$ssid" ]]; then
    wifiDeviceStatus=$(networksetup -getairportpower "$wifiDevice" | cut -c 20-)
    if [[ "$wifiDeviceStatus" == "Off" ]]; then
      [[ $elapsedTime -gt 0 ]] && log "Wifi turned off."
      turnWifiOn
      sleep 1
    else
  #elif [[ $ssid == "with an AirPort network." ]]; then
      if [[ -n "$ssid_established" ]]; then
        log "Connection to $ssid_established lost."
        ssid_established=
      fi
      if [[ -z $sendNote && $elapsedTime -ge $timeout ]]; then
        fail "Timeout: Auto-connecting to an SSID"
      fi
      waitflag=1
      setShouldOutput
      if [[ $shouldOutput == "true" ]]; then
        log "Waiting for SSID ..."
      fi
      sleep 1
    fi
  else  # SSID found!
    [[ $output -ge 3 ]] && echo "waitflag: $waitflag"
    if [[ $waitflag -eq 1 ]]; then
      ssid_established=$ssid
      log "Connected to $ssid_established"
    fi
    if [[ -z $sendNote && $elapsedTime -ge $timeout ]]; then
      [[ -n "$netTest" && $output -ge 1 ]] && echo "$netTest" | tail -1
      fail "Timeout: Internet connection detection"
    fi
    #test if internet connection available
    netTest=$(ping -t 3 -c 1 $PING 2>&1 >/dev/null)
    if [[ $? -ne 0 ]]; then
      [[ $output -ge 3 ]] && echo "ping output: $netTest"
      waitflag=2
      setShouldOutput
      if [[ $shouldOutput == "true" ]]; then
        log "Waiting for internet connection ..."
      fi
      sleep 1
    else
      sendNoteF 'Internet connection avaliable!'
      if [[ $output -ge 1 || -n $waitflag ]]; then
        log 'Internet connection available!'
      fi
      exit 0
    fi
  fi
done
