#!/bin/bash

# hard-coded settings
youtube="https://www.youtube.com"
CURL=(curl -sSi -H "Accept-Language: en-US")
STORAGE_DIR="$HOME/.yt"
JSON_STORAGE="$STORAGE_DIR/json"
RESULTS_STORAGE="$STORAGE_DIR/results"

# arguments
DEBUG=
PRINTALL=true
OPEN=
USE_CACHED=true
site=""
query=""

# variables
FILE=
RESULTS_FILE=
JSON_FILE=
declare -a LINKS
declare -a DESCRIPTIONS
OUTPUTS=

usage="Usage: \e[1m$(basename $0)\e[0m -h | [-o] [-d] [ --cached | --update ] [ -u \e[4muser\e[0m | -c \e[4mchannel\e[0m | -i \e[4mid\e[0m | -p \e[4mid\e[0m [\e[4mname\e[0m | -] | -f \e[4mfile\e[0m ] [\e[4mquery\e[0m]"
help="Fetch list of recent videos from YouTube.
$usage
        \e[1m-h\e[0m         Displays this message and exits.
        \e[1m-o\e[0m         Just opens the generated link (using \"\e[1mf\e[0m\").
        \e[1m-d\e[0m         Prints some debug logs.
        \e[4msite\e[0m       Youtube link to user or channel to grep videos from.
        \e[1m--cached\e[0m   Read from cache (default). Cancels the option \e[1m--update\e[0m, and activates the option \e[1m-a\e[0m.
        \e[1m--update\e[0m   Update the cache from YouTube. Cancels the option \e[1m--cached\e[0m.
        \e[1m--showall\e[0m  Print all results from the first page. Has no effect with option \e[1m--cached\e[0m.
        \e[1m-u\e[0m \e[4muser\e[0m    Give a \e[4muser\e[0m name to grep videos from.
        \e[1m-c\e[0m \e[4mname\e[0m    Give a channel's \e[4mname\e[0m to grep videos from.
        \e[1m-i\e[0m \e[4mID\e[0m      Give a channel's \e[4mID\e[0m to grep videos from.
        \e[1m-p\e[0m \e[4mID\e[0m      Give a playlist ID. Takes an optional second argument \e[4mname\e[0m for the cache file name (use '-' to add a \e[4mquery\e[0m afterward).
        \e[1m-f\e[0m \e[4mfile\e[0m    Give a curl fetch result \e[4mfile\e[0m to grep videos from (for debug, no save).
        \e[4mquery\e[0m       Filters for a query \e[4mquery\e[0m (case insensitive).
If only \e[4mquery\e[0m given, uses \e[1mf\e[0m to search on YouTube.

Dependencies: f, curl, node, perl, pup (https://github.com/EricChiang/pup)
"

die() {
  mes=$1
  shift
  [[ -n "$mes" ]] && printf "$mes\n" "$*"
  exit 1
}

while [[ -n $1 ]]; do
  case "$1" in
  -h|--help)
    printf "$help"
    exit 0
    ;;
  --cached)
    USE_CACHED=true
    PRINTALL=true
    ;;
  --update)
    USE_CACHED=
    PRINTALL=
    ;;
  --showall)
    PRINTALL=true
    ;;
  -d)
    DEBUG=true
    ;;
  -u)
    shift
    [[ -z "$1" ]] && die "Please give a user's handle (@*) with option -u. See -h for more help."
    site="${youtube}/"'@'"${1}/videos"
    RESULTS_FILE="$RESULTS_STORAGE/$1"
    JSON_FILE="$JSON_STORAGE/${1}.json"
    ;;
  -u2)
    shift
    [[ -z "$1" ]] && die "Please give a user name with option -u2. See -h for more help."
    site="${youtube}/user/${1}/videos"
    RESULTS_FILE="$RESULTS_STORAGE/$1"
    JSON_FILE="$JSON_STORAGE/${1}.json"
    ;;
  -c)
    shift
    [[ -z "$1" ]] && die "Please give a channel's name with option -c. See -h for more help."
    site="${youtube}/c/${1}/videos"
    RESULTS_FILE="$RESULTS_STORAGE/$1"
    JSON_FILE="$JSON_STORAGE/${1}.json"
    ;;
  -i)
    shift
    [[ -z "$1" ]] && die "Please give a channel ID with option -i. See -h for more help."
    site="${youtube}/channel/${1}/videos"
    RESULTS_FILE="$RESULTS_STORAGE/$1"
    JSON_FILE="$JSON_STORAGE/${1}.json"
    ;;
  -f) # json file or curl result
    shift
    [[ -z "$1" || ! -e "$1" ]] && die "Please give a file with curl fetch results with option -f. See -h for more help."
    FILE="$1"
    ;;
  -p)
    shift
    [[ -z "$1" ]] && die "Please give a playlist ID with option -p. See -h for more help."
    site="${youtube}/playlist?list=${1}"
    [[ -n $2 && $2 != "-" ]] && shift # use alternative name if given, except it's -
    RESULTS_FILE="$RESULTS_STORAGE/$1"
    JSON_FILE="$JSON_STORAGE/${1}.json"
    ;;
  -o)
    OPEN=true
    ;;
  -*)
    die "Wrong argument: %s\n$usage -- See -h for more help." "$1"
    ;;
  *)
    if [[ -f "$1" ]]; then
      FILE=$1
      shift
    elif [[ -z "$query" ]]; then
      query="$1"
      if [[ -z "$JSON_FILE" ]]; then
        USE_CACHED=
        PRINTALL=
      fi
      shift
    else
      echo "WARNING: Ignored argument: $1" >&2
    fi
    ;;
  esac
  shift
done

if [[ -n $USE_CACHED ]]; then
  [[ -z $site ]] && die "Please specify a channel, user, or playlist id with option \e[1m--cached\e[0m. See \e[1m-h\e[0m for more help."
  [[ -z $JSON_FILE ]] && die "No caches available for websites."
  [[ ! -f $JSON_FILE ]] && die "Cache is not created yet. Please update first using option --update."
  FILE=$JSON_FILE
  site=
fi

function parseResults0() {
  local json_file
  if [[ -z "$FILE" || "$FILE" != *.json ]]; then
    if [[ -n $JSON_FILE ]]; then
      json_file=$JSON_FILE
    else
      json_file="$JSON_STORAGE/$(date +%s).json"
    fi
    printf "%s" "$1" > "$json_file"

    if [[ -n $DEBUG ]]; then
      echo "Json file saved in ${json_file}" >&2
    fi
  else
    json_file=$FILE
  fi

  local result
  result=$(node -e "const filepath = process.argv[1];
      const fs = require('fs');
      const json = JSON.parse(fs.readFileSync(filepath));
      let content = json.contents.twoColumnBrowseResultsRenderer.tabs.filter(el => el.tabRenderer?.content)[0].tabRenderer.content

      if (content.richGridRenderer) {
        for (let item of content.richGridRenderer.contents) {
          if (!item.richItemRenderer) continue;
          let v = item.richItemRenderer.content.videoRenderer

          // get data
          let title = v.title.accessibility.accessibilityData.label // inconsistent: v.title.simpleText
          idx = title.lastIndexOf(' by ')
          if (idx < 0) { // try german version
            idx = title.lastIndexOf(' von ')
          }
          title = title.substring(0, idx)
          if (!title) {
            // slightly panic
            console.error('Error! This video has no title node:')
            console.error(item)
            continue
          }

          // filter query
          if ('$2' && title.toLowerCase().indexOf('$2'.toLowerCase()) === -1) continue;

          let description
          // Regular video
          if (v.viewCountText?.simpleText && v.viewCountText) {
            let duration = v.thumbnailOverlays[0].thumbnailOverlayTimeStatusRenderer.text.accessibility.accessibilityData.label
            let views = v.viewCountText.simpleText
            let time = v.publishedTimeText.simpleText

            description = title + ' \033[2m' + duration + '\033[0m \033[37m' + time + ' \033[2m' + views + '\033[0m'
          }
          // Livestream
          else if (v.viewCountText?.runs) {
            let views = v.viewCountText.runs[0].text
            description = '\033[1mLive:\033[0m ' + title + ' \033[37m' + views + '\033[0m'
          }
          else if (!v.viewCountText && v.publishedTimeText) {
            let duration = v.thumbnailOverlays[0].thumbnailOverlayTimeStatusRenderer.text.accessibility.accessibilityData.label
            let time = v.publishedTimeText.simpleText

            description = title + ' \033[2m' + duration + '\033[0m \033[37m' + time + '\033[0m'
          } else {
            console.error('Unknown video type!')
            console.error(item)
          }

          // create link
          let link = '$youtube' + v.navigationEndpoint.commandMetadata.webCommandMetadata.url

          // print out, remove newlines
          console.log(description.replace(/\r?\n|\r/gm, ''))
          console.log(link)
        }
      }
      else if (content.sectionListRenderer) {
        let playlistVideoRenderer = content.sectionListRenderer.contents[0].itemSectionRenderer.contents[0].playlistVideoListRenderer
        for (let item of playlistVideoRenderer.contents) {
          if (!item.playlistVideoRenderer) continue;
          let v = item.playlistVideoRenderer

          // get data
          let title = v.title.accessibility.accessibilityData.label // inconsistent: v.title.simpleText
          let by_str = ' by'
          idx = title.lastIndexOf(by_str)
          if (idx < 0) { // try german version
            by_str = ' von'
            idx = title.lastIndexOf(by_str)
          }
          title = title.substring(0, idx)
          if (!title) {
            // slightly panic
            console.error('Error! This video has no title node:')
            console.error(item)
            continue
          }

          // filter query
          if ('$2' && title.toLowerCase().indexOf('$2'.toLowerCase()) === -1) continue;

          let description
          // Regular video
          let duration = v.thumbnailOverlays[0].thumbnailOverlayTimeStatusRenderer.text.accessibility.accessibilityData.label
          let user = v.shortBylineText.runs[0].text
          if (v.videoInfo) {
            let views = v.videoInfo.runs[0].text
            let time = v.videoInfo.runs[2].text
            description = title + '\033[0m \033[37m' + user + '\033[0m \033[2m' + duration + '\033[0m \033[37m' + time + ' \033[2m' + views + '\033[0m'
          }
          else {
            description = title + '\033[0m \033[37m' + user + '\033[0m \033[2m' + duration + '\033[0m'
          }

          // create link
          let link = '$youtube' + '/watch?v=' + v.videoId

          // print out, remove newlines
          console.log(description.replace(/\r?\n|\r/gm, ''))
          console.log(link)
        }
      }
      else if (content.messageRenderer) { // TODO: this is probably wrong by now
        console.error(contents.messageRenderer.text.simpleText)
        process.exit(42)
      }
      else {
        console.error('Unknown content object!')
        console.error(content)
        process.exit(1)
      }" "$json_file") || return $?

  [[ -z $DEBUG && -z "$JSON_FILE" && "$FILE" != "$json_file" ]] && rm "$json_file" # rm tmp files
  printf "%s" "$result" | perl -MHTML::Entities -pe 'decode_entities($_);'
}

function parseResults() {
  local v1 tmp_results tmp_descriptions tmp_links
  # find place of content in html
  if [[ -z "$FILE" || "$FILE" != *.json ]]; then
    v1=$(printf "%s" "$1" | grep -m 1 '[ "]ytInitialData' | sed 's/.*ytInitialData = //' | sed 's/.*ytInitialData"] = //' | sed 's/<\/script>.*//' | sed 's/;$//')
  else
    v1=$1
  fi
  tmp_results=$(parseResults0 "$v1" "$2")
  exit_code=$?
  [[ $exit_code == 42 ]] && die
  [[ $exit_code -gt 0 ]] && die "parseResults0: Couldn't parse descriptions for ${RESULTS_FILE##*/}"
  tmp_descriptions=$(printf "%s" "$tmp_results" | sed -n 'p;n')
  IFS=$'\n' DESCRIPTIONS=(${tmp_descriptions})
  tmp_links=$(printf "%s" "$tmp_results" | sed -n '1d;p;n')
  IFS=$'\n' LINKS=(${tmp_links})

  if [[ -n $DEBUG ]]; then
    if [[ -n "$query" ]]; then
      local all_results=$(parseResults0 "$1")
      printf "All results:\n%s\n" "$all_results"
      printf "Filtered results:\n%s\n" "$tmp_results"
    else
      printf "Results:\n%s\n" "$tmp_results"
    fi
  fi

  if [[ ${#DESCRIPTIONS[@]} -eq 0 ]]; then
    if [[ -n $2 ]]; then
      die "No results found for \"$2\". Try another."
    else
      die "No results found. Probably a script failure."
    fi
  fi
}

# fetch videos from youtube site $1, filtered by optional query $2
function fetchVideos() {
  if [[ -n $DEBUG ]]; then
    printf '"%s" ' "${CURL[@]}" >&2
    printf "%s\n" "$1" >&2
  fi

  # curl fetch
  if [[ -n "$PROXY" ]]; then
    #ip=$(curl -sS --socks5-hostname "$PROXY" ifconfig.me)
    #echo "Using proxy ($ip)"
    local src=$("${CURL[@]}" --socks5-hostname "$PROXY" "$1")
  else
    #echo "Using no proxy ($(curl -sS ifconfig.me))"
    local src=$("${CURL[@]}" "$1")
  fi

  if [[ -n $DEBUG && -n "$src" ]]; then
    result_name="${RESULTS_FILE}_$(date +%s).curl"
    echo "$src" > "${result_name}"
    echo "Curl result saved in ${result_name}" >&2
  fi

  http_status=$(echo "$src" | sed -n '1p')
  case "$http_status" in
    *200*)
      ;;
    *404*|*303*)
      if [[ $1 = */user/* ]]; then
        die "Bad username: %s\n" $(printf "%s" "$1" | sed -e 's/.*\/user\///' -e 's/\/videos//')
      else
        die "Channel does not exist: $1"
      fi
      return
      ;;
    *)
      echo "Uncaught HTTP Error: $http_status"
      return
      ;;
  esac

  parseResults "$src" "$2"

  if [[ ${#DESCRIPTIONS[@]} != ${#LINKS[@]} ]]; then
    printf "WTF-Error: %d descriptions, but %d links!\n" ${#DESCRIPTIONS[@]} ${#LINKS[@]}
    printf "DESCRIPTIONS:\n"
    printf '%s\n' "${DESCRIPTIONS[@]}"
    printf "LINKS:\n"
    printf '%s\n' "${LINKS[@]}"
    die
  fi
}

function setupOutputsVariable() {
  OUTPUTS=
  cnt=0
  IFS=$'\n'
  for idx in "${!DESCRIPTIONS[@]}"; do # an array is basically a dictionary with index as key; get keys with ${!arr[@]}
    if [ -t 1 ]; then
      OUTPUTS+=$(printf "%s: %s \033[2m%s\033[0m" "$((idx+1))" "${DESCRIPTIONS[$idx]}" "${LINKS[$idx]}")$'\n' # increment for zero-based to one-based conversion; why does newline in printf not work?
    else
      OUTPUTS+=$(printf "%s \033[2m%s\033[0m" "${DESCRIPTIONS[$idx]}" "${LINKS[$idx]}")$'\n' # increment for zero-based to one-based conversion; why does newline in printf not work?
    fi
  done
}

function filterLinks() {
  local content=
  if [[ -e "$RESULTS_FILE" ]]; then
    content=$(< "$RESULTS_FILE")
  fi

  if [[ -z $PRINTALL ]]; then
    # filter DESCRIPTIONS and LINKS to contain only new elements
    for idx in "${!LINKS[@]}"; do
      if [[ "$content" == *"${LINKS[$idx]}"* ]]; then
        unset 'LINKS[$idx]'
        unset 'DESCRIPTIONS[$idx]'
      fi
    done
    # rebuild indices
    local -a NEW_LINKS
    local -a NEW_DESCRIPTIONS
    for idx in "${!LINKS[@]}"; do
      NEW_LINKS+=("${LINKS[$idx]}")
      NEW_DESCRIPTIONS+=("${DESCRIPTIONS[$idx]}")
    done
    LINKS=("${NEW_LINKS[@]}")
    DESCRIPTIONS=("${NEW_DESCRIPTIONS[@]}")
    unset NEW_LINKS
    unset NEW_DESCRIPTIONS
  fi
}

function askForChoose() {
  if [[ ${#DESCRIPTIONS[@]} -eq 1 ]]; then
    printf "Only one result found. Do you want to open it? (y/n) [y]: "
    read ans
    case $ans in
      ""|j|y|J|Y|Yes)
        if [[ -z $DEBUG ]]; then
          f -i "${LINKS[0]}"
        else
          printf "f -i %s\n" "${LINKS[0]}"
        fi
      ;;
      *)
      ;;
    esac
  else
    printf "Which one do you want to open? (1-%d/q) [1]: " ${#DESCRIPTIONS[@]}
    read ans
    [[ -z "$ans" ]] && ans=1
    if [[ $ans =~ ^[0-9]+$ ]]; then
      if [[ $ans -gt 0 && $ans -le ${#DESCRIPTIONS[@]} ]]; then
        ((ans--)) # decrement to convert from one-based to zero-based
        local link=${LINKS[${ans}]}
        if [[ -z $DEBUG ]]; then
          f "$link"
        else
          printf "f %s" "$link"
        fi
      else
        die "Error: Answer must not be zero or larger than ${#DESCRIPTIONS[@]}, but was: $ans."
      fi
    else
      printf "Nothing opened.\n"
    fi
  fi
}

function updateLocalStorage() {
  printf "%s" "$OUTPUTS" > "$RESULTS_FILE"
}

if [[ "$site" = ${youtube}* ]]; then
  if [[ -n $OPEN ]]; then
    if [[ -z $DEBUG ]]; then
      echo "open $site"
      f -i "$site"
    else
      printf "f -i %s\n" "$site"
    fi
    exit 0
  fi

  if [[ ! -d "$JSON_STORAGE" ]]; then
    mkdir -p "$JSON_STORAGE" || die "Couldn't create $JSON_STORAGE"
  fi
  if [[ ! -d "$RESULTS_STORAGE" ]]; then
    mkdir -p "$RESULTS_STORAGE" || die "Couldn't create $RESULTS_STORAGE"
  fi

  # echo "$site"
  if [[ "$site" = */videos || "$site" = *playlist* ]]; then
    fetchVideos "$site" "$query"
    setupOutputsVariable

    if [[ -z $PRINTALL ]]; then
      filterLinks
    fi
    if [[ -n $RESULTS_FILE ]]; then
      updateLocalStorage
    fi
    if [[ -z $PRINTALL ]]; then
      setupOutputsVariable
    fi

    if [[ ${#DESCRIPTIONS[@]} -eq 0 ]]; then
      if [[ -z $PRINTALL ]]; then
        printf "No new videos!\n"
      else
        printf "No videos found!\n"
      fi
      exit 0
    fi

    if [[ ! -t 1 ]]; then # not interactive
      printf "%s" "$OUTPUTS"
      exit 0
    fi

    printf "%s" "$OUTPUTS"
    askForChoose
  else
    [[ -n "$query" ]] && printf "Warning: query will be ignored: %s\n" "$query" >&2
    if [[ -z $DEBUG ]]; then
      f -i "$site"
    else
      printf "f -i %s\n" "$site"
    fi
  fi
elif [[ -n "$FILE" ]]; then
  results=$(cat "$FILE")
  parseResults "$results" "$query"
  setupOutputsVariable
  filterLinks

  if [[ ! -t 1 ]]; then # not interactive
    printf "%s" "$OUTPUTS"
    exit 0
  fi

  printf "%s" "$OUTPUTS"
  askForChoose
else
  # since $site is just the first given non-option argument, handle it here as part of the query
  if [[ -n "$site" ]]; then
    query="$site $query"
  fi
  if [[ -z $DEBUG ]]; then
    f yt "$query"
  else
    printf "f yt \"%s\"\n" "$query"
  fi
fi
